from typing import Literal

class DeviceError(Exception): ...

class DeviceNotFoundError(DeviceError): ...

class DeviceNotFoundAtPathError(DeviceNotFoundError):
    def __init__(self, sys_path : str) -> None: ...

    @property
    def sys_path(self) -> str: ...

    def __str__(self) -> str: ...

class DeviceNotFoundByFileError(DeviceNotFoundError): ...

class DeviceNotFoundByInterfaceIndexError(DeviceNotFoundError): ...

class DeviceNotFoundByKernelDeviceError(DeviceNotFoundError): ...

class DeviceNotFoundByNameError(DeviceNotFoundError):
    def __init__(self, subsystem : str, sys_name : str) -> None: ...

    @property
    def subsystem(self) -> str: ...

    @property
    def sys_name(self) -> str: ...

    def __str__(self) -> str: ...

class DeviceNotFoundByNumberError(DeviceNotFoundError):
    def __init__(self, typ : Literal["char", "block"] , number : int) -> None: ...

    @property
    def device_type(self) -> Literal["char", "block"]: ...

    @property
    def device_number(self) -> int: ...

    def __str__(self) -> str: ...

class DeviceNotFoundInEnvironmentError(DeviceNotFoundError):
    def __str__(self) -> str: ...

class DeviceValueError(DeviceError):
    def __init__(self, value : object, param : str, msg : str | None = None) -> None: ...

    def __str__(self) -> str: ...
