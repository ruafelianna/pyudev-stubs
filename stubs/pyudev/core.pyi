from collections.abc import Generator
from typing import Any

from .device import Device

class Context:
    def __init__(self) -> None: ...

    def __del__(self) -> None: ...

    @property
    def sys_path(self) -> str: ...

    @property
    def device_path(self) -> str: ...

    @property
    def run_path(self) -> str: ...

    @property
    def log_priority(self) -> int: ...

    @log_priority.setter
    def log_priority(self, value : int) -> None: ...

    def list_devices(self, **kwargs : Any) -> Enumerator: ...

class Enumerator:
    def __init__(self, context : Context) -> None: ...

    def __del__(self) -> None: ...

    def match(self, **kwargs : Any) -> Enumerator: ...

    def match_subsystem(self, subsystem : str | bytes, nomatch : bool = False) -> Enumerator: ...

    def match_sys_name(self, sys_name : str | bytes) -> Enumerator: ...

    def match_property(self, prop : str | bytes, value : int | bool | bytes | str) -> Enumerator: ...

    def match_attribute(self, attribute : str | bytes, value : int | bool | bytes | str, nomatch : bool = False) -> Enumerator: ...

    def match_tag(self, tag : str | bytes) -> Enumerator: ...

    def match_is_initialized(self) -> Enumerator: ...

    def match_parent(self, parent : Device) -> Enumerator: ...

    def __iter__(self) -> Generator[Device]: ...
