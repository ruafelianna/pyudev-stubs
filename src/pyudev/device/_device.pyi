from collections.abc import Callable, Generator
from datetime import timedelta
from typing import Any, Literal

from ..core import Context

class Devices:
    @classmethod
    def from_path(cls, context : Context, path : str | bytes) -> Device: ...

    @classmethod
    def from_sys_path(cls, context : Context, sys_path : str | bytes) -> Device: ...

    @classmethod
    def from_name(cls, context : Context, subsystem : str | bytes, sys_name : str | bytes) -> Device: ...

    @classmethod
    def from_device_number(cls, context : Context, typ : Literal["char", "block"], number : int) -> Device: ...

    @classmethod
    def from_device_file(cls, context : Context, filename : str) -> Device: ...

    @classmethod
    def from_interface_index(cls, context : Context, ifindex : int) -> Device: ...

    @classmethod
    def from_kernel_device(cls, context : Context, kernel_device : str) -> Device: ...

    @classmethod
    def from_environment(cls, context : Context) -> Device: ...

    @classmethod
    def METHODS(cls) -> list[Callable[..., Device]]: ...

class Device:
    def __init__(self, context : Context, _device : Any) -> None: ...

    def __del__(self) -> None: ...

    def __repr__(self) -> str: ...

    @property
    def parent(self) -> Device | None: ...

    @property
    def children(self) -> Generator[Device]: ...

    @property
    def ancestors(self) -> Generator[Device]: ...

    def find_parent(self, subsystem : str | bytes, device_type : str | bytes | None = None) -> Device | None: ...

    @property
    def sys_path(self) -> str: ...

    @property
    def device_path(self) -> str: ...

    @property
    def subsystem(self) -> str | None: ...

    @property
    def sys_name(self) -> str: ...

    @property
    def sys_number(self) -> str | None: ...

    @property
    def device_type(self) -> str | None: ...

    @property
    def driver(self) -> str | None: ...

    @property
    def device_node(self) -> str | None: ...

    @property
    def device_number(self) -> int: ...

    @property
    def is_initialized(self) -> bool: ...

    @property
    def time_since_initialized(self) -> timedelta: ...

    @property
    def device_links(self) -> Generator[str]: ...

    @property
    def action(self) -> str | None: ...

    @property
    def sequence_number(self) -> int: ...

    @property
    def attributes(self) -> Attributes: ...

    @property
    def properties(self) -> Properties: ...

    @property
    def tags(self) -> Tags: ...

    def __hash__(self) -> int: ...

    def __eq__(self, other : Any) -> bool: ...

    def __ne__(self, other : Any) -> bool: ...

class Properties:
    def __init__(self, device : Device) -> None: ...

    def __iter__(self) -> Generator[str]: ...

    def __len__(self) -> int: ...

    def __getitem__(self, prop : str | bytes) -> str: ...

    def asint(self, prop : str | bytes) -> int: ...

    def asbool(self, prop : str | bytes) -> bool: ...

class Attributes:
    def __init__(self, device : Device) -> None: ...

    @property
    def available_attributes(self) -> Generator[str]: ...

    def _get(self, attribute : str | bytes) -> bytes: ...

    def get(self, attribute : str | bytes, default : bytes | None = None) -> object: ...

    def asstring(self, attribute : str | bytes) -> str: ...

    def asint(self, attribute : str | bytes) -> int: ...

    def asbool(self, attribute : str | bytes) -> bool: ...

class Tags:
    def __init__(self, device : Device) -> None: ...

    def _has_tag(self, tag : str) -> bool: ...

    def __contains__(self, tag : str) -> bool: ...

    def __iter__(self) -> Generator[str]: ...
